{
  "address": "0x4c1E877E3e4B99b8a2746E773C34d0e3299e799D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address payable",
          "name": "_stationLabs",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_signer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newOperator",
          "type": "address"
        }
      ],
      "name": "ChangeOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SALE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEAM_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "bought",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOperator",
          "type": "address"
        }
      ],
      "name": "changeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_newStationLabs",
          "type": "address"
        }
      ],
      "name": "changeStationLabs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "claimEthSkins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStuckFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "mintTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setSaleStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "signer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stationLabs",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teamMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x60f2e40697bc2fc4b7809dd39d6d00ab88be67de4d42e539cc7d8c3014d44389",
  "receipt": {
    "to": null,
    "from": "0x6BDD6Bb68Ec6927F56749b46746F0AFA7CdA9F3c",
    "contractAddress": "0x4c1E877E3e4B99b8a2746E773C34d0e3299e799D",
    "transactionIndex": 17,
    "gasUsed": "2548150",
    "logsBloom": "0x
    "blockHash": "0x0000d246000005c5b52749b77f67f53e2e3b22737edec964210e149a7a60d3c2",
    "transactionHash": "0x60f2e40697bc2fc4b7809dd39d6d00ab88be67de4d42e539cc7d8c3014d44389",
    "logs": [],
    "blockNumber": 22366493,
    "cumulativeGasUsed": "5268025",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Station: Callisto-6",
    "CAL6",
    "0x6BDD6Bb68Ec6927F56749b46746F0AFA7CdA9F3c",
    "0x9dBfB700505854c2ab7d545482cec74D4771A091"
  ],
  "solcInputHash": "41286d6d5ef06cc03fee211cfab781b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address payable\",\"name\":\"_stationLabs\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"ChangeOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"bought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"changeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newStationLabs\",\"type\":\"address\"}],\"name\":\"changeStationLabs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"claimEthSkins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"mintTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setSaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stationLabs\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Station.sol\":\"Station\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Station.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\n\\ncontract Station is ERC721Enumerable, ERC721URIStorage {\\n  uint256 public constant SALE_LIMIT = 9000;\\n  uint256 public constant TEAM_LIMIT = 1000;\\n  uint256 public constant PRICE = 200 ether;\\n  bytes16 internal constant ALPHABET = '0123456789abcdef';\\n\\n  address public owner;\\n  uint256 public sold;\\n  uint256 public teamMinted;\\n  bool public saleIsActive = true;\\n  address payable public stationLabs;\\n  address public signer;\\n\\n  mapping(address => uint256) public bought;\\n  mapping(address => bool) public claimed;\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    address payable _stationLabs,\\n    address _signer\\n  ) ERC721(_name, _symbol) {\\n    owner = msg.sender;\\n    stationLabs = _stationLabs;\\n    signer = _signer;\\n  }\\n\\n  modifier onlyOperator {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  function _beforeTokenTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual override(ERC721, ERC721Enumerable) {\\n    ERC721Enumerable._beforeTokenTransfer(from, to, tokenId);\\n  }\\n\\n  function buy(uint256 _count, uint256 _maxCount, uint8 _v, bytes32 _r, bytes32 _s) public payable {\\n    require(_count > 0, \\\"Spaceship count cannot be Zero!\\\");\\n    require(_count <= SALE_LIMIT - sold, \\\"Sale out of stock!\\\");\\n    require(saleIsActive, \\\"Sale is not active!\\\");\\n    require(bought[msg.sender] + _count <= _maxCount);\\n    bytes32 _hash = keccak256(abi.encodePacked(msg.sender, _maxCount));\\n    require(verifyHash(_hash, _v, _r, _s) == signer);\\n    uint256 amountDue = _count * PRICE;\\n    require(msg.value == amountDue, \\\"Sent ether is not equal to the required amount for purchase completion\\\");\\n    for(uint i=0; i<_count; i++) {\\n      string memory _tokenURI = string(abi.encodePacked(\\\"https://station0x.com/api/\\\", addressToString(address(this)), \\\"/\\\", toString(totalSupply()), \\\".json\\\"));\\n      mint(msg.sender, totalSupply(), _tokenURI, \\\"\\\");\\n    }\\n    sold += _count;\\n    bought[msg.sender] += _count;\\n    (bool success,) = stationLabs.call{value:msg.value}('');\\n    require(success, 'Failed to forward funds');\\n  }\\n\\n  function claimEthSkins(uint256 _amount, uint8 _v, bytes32 _r, bytes32 _s) public {\\n    require(!claimed[msg.sender], \\\"You already claimed your skins\\\");\\n    bytes32 _hash = keccak256(abi.encodePacked(msg.sender, _amount));\\n    require(verifyHash(_hash, _v, _r, _s) == signer);\\n    for(uint i=0; i<_amount; i++) {\\n      string memory _tokenURI = string(abi.encodePacked(\\\"https://station0x.com/api/\\\", addressToString(address(this)), \\\"/\\\", toString(totalSupply()), \\\".json\\\"));\\n      mint(msg.sender, totalSupply(), _tokenURI, \\\"\\\");\\n    }\\n    sold += _amount;\\n    bought[msg.sender] += _amount;\\n    claimed[msg.sender] = true;\\n  }\\n\\n  function getStuckFunds() public onlyOperator {\\n    payable(msg.sender).transfer(address(this).balance);\\n  }\\n\\n  function mintTo(address _to, uint256 _count) public onlyOperator {\\n    require(_count <= TEAM_LIMIT - teamMinted);\\n    require(_count > 0);\\n\\n    for(uint i=0; i<_count; i++) {\\n      string memory _tokenURI = string(abi.encodePacked(\\\"https://station0x.com/api/\\\", addressToString(address(this)), \\\"/\\\", toString(totalSupply()), \\\".json\\\"));\\n      mint(_to, totalSupply(), _tokenURI, \\\"\\\");\\n    }\\n    teamMinted += _count;\\n  }\\n\\n  function setSaleStatus(bool _status) public onlyOperator {\\n    saleIsActive = _status;\\n  }\\n\\n  function mint(address to, uint256 tokenId, string memory _tokenURI, bytes memory _data) internal {\\n    _safeMint(to, tokenId, _data);\\n    _setTokenURI(tokenId, _tokenURI);\\n  }\\n\\n  function changeOperator(address _newOperator) public onlyOperator {\\n    owner = _newOperator;\\n    emit ChangeOperator(_newOperator);\\n  }\\n\\n  function setTokenURI(uint256 tokenId, string memory _tokenURI) public onlyOperator {\\n    _setTokenURI(tokenId, _tokenURI);\\n  }\\n\\n  function tokenURI(uint256 tokenId) public view virtual override(ERC721, ERC721URIStorage) returns (string memory) {\\n    return ERC721URIStorage.tokenURI(tokenId);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Enumerable, ERC721) returns (bool) {\\n    return ERC721Enumerable.supportsInterface(interfaceId);\\n  }\\n\\n  function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\n    ERC721URIStorage._burn(tokenId);\\n  }\\n\\n  function addressToString(address _addr) internal pure returns (string memory) {\\n    uint value = uint256(uint160(_addr));\\n    uint length = 20;\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = '0';\\n    buffer[1] = 'x';\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = ALPHABET[value & 0xf];\\n      value >>= 4;\\n    }\\n    require(value == 0, 'Strings: hex length insufficient');\\n    return string(buffer);\\n  }\\n    \\n  function toString(uint256 value) internal pure returns (string memory) {\\n  // Inspired by OraclizeAPI's implementation - MIT licence\\n  // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n    if (value == 0) {\\n      return \\\"0\\\";\\n    }\\n    uint256 temp = value;\\n    uint256 digits;\\n    while (temp != 0) {\\n      digits++;\\n      temp /= 10;\\n    }\\n    bytes memory buffer = new bytes(digits);\\n    while (value != 0) {\\n      digits -= 1;\\n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n      value /= 10;\\n    }\\n    return string(buffer);\\n  }\\n\\n  function verifyHash(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address _signer) {\\n    bytes32 messageDigest = keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _hash));\\n    return ecrecover(messageDigest, _v, _r, _s);\\n  }\\n\\n  function changeStationLabs(address payable _newStationLabs) public {\\n    require(msg.sender == address(stationLabs));\\n    stationLabs = _newStationLabs;\\n  }\\n\\n  event ChangeOperator(address _newOperator);\\n}\",\"keccak256\":\"0xa206ece9ca3ea6f21799fe5187d4bc91203e9c220d847af2aca1211fe0b966f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600e805460ff191660011790553480156200001e57600080fd5b5060405162002e2238038062002e22833981016040819052620000419162000221565b8351849084906200005a906000906020850190620000c4565b50805162000070906001906020840190620000c4565b5050600b8054336001600160a01b031991821617909155600e8054610100600160a81b0319166101006001600160a01b0396871602179055600f805490911692909316919091179091555062000321915050565b828054620000d290620002b5565b90600052602060002090601f016020900481019282620000f6576000855562000141565b82601f106200011157805160ff191683800117855562000141565b8280016001018555821562000141579182015b828111156200014157825182559160200191906001019062000124565b506200014f92915062000153565b5090565b5b808211156200014f576000815560010162000154565b600082601f8301126200017c57600080fd5b81516001600160401b0380821115620001995762000199620002f2565b604051601f8301601f19908116603f01168101908282118183101715620001c457620001c4620002f2565b81604052838152602092508683858801011115620001e157600080fd5b600091505b83821015620002055785820183015181830184015290820190620001e6565b83821115620002175760008385830101525b9695505050505050565b600080600080608085870312156200023857600080fd5b84516001600160401b03808211156200025057600080fd5b6200025e888389016200016a565b955060208701519150808211156200027557600080fd5b5062000284878288016200016a565b9350506040850151620002978162000308565b6060860151909250620002aa8162000308565b939692955090935050565b600181811c90821680620002ca57607f821691505b60208210811415620002ec57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146200031e57600080fd5b50565b612af180620003316000396000f3fe6080604052600436106102045760003560e01c806346fdcb4611610118578063a22cb465116100a0578063d897833e1161006f578063d897833e146105db578063e8b5498d146105fb578063e985e9c514610611578063eb8d24441461065a578063ef23571d1461067457600080fd5b8063a22cb4651461054b578063b88d4fde1461056b578063c87b56dd1461058b578063c884ef83146105ab57600080fd5b806370a08231116100e757806370a08231146104b95780638d859f3e146104d95780638da5cb5b146104f657806395d89b4114610516578063998b59491461052b57600080fd5b806346fdcb46146104395780634f6ccce71461044c5780636352211e1461046c578063667022fd1461048c57600080fd5b8063162094c41161019b57806323b872dd1161016a57806323b872dd146103a35780632f745c59146103c3578063368bf74e146103e357806342842e0e146103f9578063449a52f81461041957600080fd5b8063162094c41461033857806318160ddd14610358578063212e8f671461036d578063238ac9331461038357600080fd5b806306fdde03116101d757806306fdde03146102995780630804fa45146102bb578063081812fc146102f8578063095ea7b31461031857600080fd5b806301ffc9a71461020957806302c7e7af1461023e57806303f8ee411461026257806306394c9b14610279575b600080fd5b34801561021557600080fd5b5061022961022436600461261e565b610694565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b50610254600c5481565b604051908152602001610235565b34801561026e57600080fd5b506102776106a5565b005b34801561028557600080fd5b5061027761029436600461248b565b6106eb565b3480156102a557600080fd5b506102ae610756565b604051610235919061285d565b3480156102c757600080fd5b50600e546102e09061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610235565b34801561030457600080fd5b506102e0610313366004612658565b6107e8565b34801561032457600080fd5b506102776103333660046125d7565b610875565b34801561034457600080fd5b50610277610353366004612671565b61098b565b34801561036457600080fd5b50600854610254565b34801561037957600080fd5b5061025461232881565b34801561038f57600080fd5b50600f546102e0906001600160a01b031681565b3480156103af57600080fd5b506102776103be3660046124e1565b6109b0565b3480156103cf57600080fd5b506102546103de3660046125d7565b6109e1565b3480156103ef57600080fd5b506102546103e881565b34801561040557600080fd5b506102776104143660046124e1565b610a77565b34801561042557600080fd5b506102776104343660046125d7565b610a92565b6102776104473660046126cc565b610b6c565b34801561045857600080fd5b50610254610467366004612658565b610eda565b34801561047857600080fd5b506102e0610487366004612658565b610f6d565b34801561049857600080fd5b506102546104a736600461248b565b60106020526000908152604090205481565b3480156104c557600080fd5b506102546104d436600461248b565b610fe4565b3480156104e557600080fd5b50610254680ad78ebc5ac620000081565b34801561050257600080fd5b50600b546102e0906001600160a01b031681565b34801561052257600080fd5b506102ae61106b565b34801561053757600080fd5b5061027761054636600461248b565b61107a565b34801561055757600080fd5b506102776105663660046125a2565b6110be565b34801561057757600080fd5b50610277610586366004612522565b611183565b34801561059757600080fd5b506102ae6105a6366004612658565b6111bb565b3480156105b757600080fd5b506102296105c636600461248b565b60116020526000908152604090205460ff1681565b3480156105e757600080fd5b506102776105f6366004612603565b6111c6565b34801561060757600080fd5b50610254600d5481565b34801561061d57600080fd5b5061022961062c3660046124a8565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561066657600080fd5b50600e546102299060ff1681565b34801561068057600080fd5b5061027761068f366004612713565b6111f0565b600061069f8261137f565b92915050565b600b546001600160a01b031633146106bc57600080fd5b60405133904780156108fc02916000818181858888f193505050501580156106e8573d6000803e3d6000fd5b50565b600b546001600160a01b0316331461070257600080fd5b600b80546001600160a01b0319166001600160a01b0383169081179091556040519081527f8eb831fe42156caaf4721a87ad40c6e662b893dbeee76d7a3ed2564a318b091c9060200160405180910390a150565b606060008054610765906129b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610791906129b8565b80156107de5780601f106107b3576101008083540402835291602001916107de565b820191906000526020600020905b8154815290600101906020018083116107c157829003601f168201915b5050505050905090565b60006107f3826113a4565b6108595760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061088082610f6d565b9050806001600160a01b0316836001600160a01b031614156108ee5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610850565b336001600160a01b038216148061090a575061090a813361062c565b61097c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610850565b61098683836113c1565b505050565b600b546001600160a01b031633146109a257600080fd5b6109ac828261142f565b5050565b6109ba33826114ba565b6109d65760405162461bcd60e51b8152600401610850906128c2565b6109868383836115a4565b60006109ec83610fe4565b8210610a4e5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610850565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61098683838360405180602001604052806000815250611183565b600b546001600160a01b03163314610aa957600080fd5b600d54610ab8906103e861295e565b811115610ac457600080fd5b60008111610ad157600080fd5b60005b81811015610b50576000610ae73061174f565b610af8610af360085490565b6118f7565b604051602001610b099291906127a9565b6040516020818303038152906040529050610b3d84610b2760085490565b83604051806020016040528060008152506119f5565b5080610b48816129f3565b915050610ad4565b5080600d6000828254610b639190612913565b90915550505050565b60008511610bbc5760405162461bcd60e51b815260206004820152601f60248201527f53706163657368697020636f756e742063616e6e6f74206265205a65726f21006044820152606401610850565b600c54610bcb9061232861295e565b851115610c0f5760405162461bcd60e51b815260206004820152601260248201527153616c65206f7574206f662073746f636b2160701b6044820152606401610850565b600e5460ff16610c575760405162461bcd60e51b815260206004820152601360248201527253616c65206973206e6f74206163746976652160681b6044820152606401610850565b336000908152601060205260409020548490610c74908790612913565b1115610c7f57600080fd5b6040516bffffffffffffffffffffffff193360601b1660208201526034810185905260009060540160408051601f198184030181529190528051602090910120600f549091506001600160a01b0316610cda82868686611a0a565b6001600160a01b031614610ced57600080fd5b6000610d02680ad78ebc5ac62000008861293f565b9050803414610d885760405162461bcd60e51b815260206004820152604660248201527f53656e74206574686572206973206e6f7420657175616c20746f20746865207260448201527f6571756972656420616d6f756e7420666f7220707572636861736520636f6d706064820152653632ba34b7b760d11b608482015260a401610850565b60005b87811015610dec576000610d9e3061174f565b610daa610af360085490565b604051602001610dbb9291906127a9565b6040516020818303038152906040529050610dd933610b2760085490565b5080610de4816129f3565b915050610d8b565b5086600c6000828254610dff9190612913565b90915550503360009081526010602052604081208054899290610e23908490612913565b9091555050600e5460405160009161010090046001600160a01b03169034908381818185875af1925050503d8060008114610e7a576040519150601f19603f3d011682016040523d82523d6000602084013e610e7f565b606091505b5050905080610ed05760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f20666f72776172642066756e64730000000000000000006044820152606401610850565b5050505050505050565b6000610ee560085490565b8210610f485760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610850565b60088281548110610f5b57610f5b612a64565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b03168061069f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610850565b60006001600160a01b03821661104f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610850565b506001600160a01b031660009081526003602052604090205490565b606060018054610765906129b8565b600e5461010090046001600160a01b0316331461109657600080fd5b600e80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6001600160a01b0382163314156111175760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610850565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61118d33836114ba565b6111a95760405162461bcd60e51b8152600401610850906128c2565b6111b584848484611abf565b50505050565b606061069f82611af2565b600b546001600160a01b031633146111dd57600080fd5b600e805460ff1916911515919091179055565b3360009081526011602052604090205460ff16156112505760405162461bcd60e51b815260206004820152601e60248201527f596f7520616c726561647920636c61696d656420796f757220736b696e7300006044820152606401610850565b6040516bffffffffffffffffffffffff193360601b1660208201526034810185905260009060540160408051601f198184030181529190528051602090910120600f549091506001600160a01b03166112ab82868686611a0a565b6001600160a01b0316146112be57600080fd5b60005b858110156113225760006112d43061174f565b6112e0610af360085490565b6040516020016112f19291906127a9565b604051602081830303815290604052905061130f33610b2760085490565b508061131a816129f3565b9150506112c1565b5084600c60008282546113359190612913565b90915550503360009081526010602052604081208054879290611359908490612913565b9091555050336000908152601160205260409020805460ff191660011790555050505050565b60006001600160e01b0319821663780e9d6360e01b148061069f575061069f82611c61565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113f682610f6d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611438826113a4565b61149b5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610850565b6000828152600a60209081526040909120825161098692840190612356565b60006114c5826113a4565b6115265760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610850565b600061153183610f6d565b9050806001600160a01b0316846001600160a01b0316148061156c5750836001600160a01b0316611561846107e8565b6001600160a01b0316145b8061159c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166115b782610f6d565b6001600160a01b03161461161f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610850565b6001600160a01b0382166116815760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610850565b61168c838383611cb1565b6116976000826113c1565b6001600160a01b03831660009081526003602052604081208054600192906116c090849061295e565b90915550506001600160a01b03821660009081526003602052604081208054600192906116ee908490612913565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60606001600160a01b0382166014600061176a82600261293f565b611775906002612913565b67ffffffffffffffff81111561178d5761178d612a7a565b6040519080825280601f01601f1916602001820160405280156117b7576020820181803683370190505b509050600360fc1b816000815181106117d2576117d2612a64565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061180157611801612a64565b60200101906001600160f81b031916908160001a905350600061182583600261293f565b611830906001612913565b90505b60018111156118a8576f181899199a1a9b1b9c1cb0b131b232b360811b84600f166010811061186457611864612a64565b1a60f81b82828151811061187a5761187a612a64565b60200101906001600160f81b031916908160001a90535060049390931c926118a1816129a1565b9050611833565b50821561159c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610850565b60608161191b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611945578061192f816129f3565b915061193e9050600a8361292b565b915061191f565b60008167ffffffffffffffff81111561196057611960612a7a565b6040519080825280601f01601f19166020018201604052801561198a576020820181803683370190505b5090505b841561159c5761199f60018361295e565b91506119ac600a86612a0e565b6119b7906030612913565b60f81b8183815181106119cc576119cc612a64565b60200101906001600160f81b031916908160001a9053506119ee600a8661292b565b945061198e565b611a00848483611cbc565b6111b5838361142f565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018590526000908190605c0160408051601f1981840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa158015611aaa573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b611aca8484846115a4565b611ad684848484611cef565b6111b55760405162461bcd60e51b815260040161085090612870565b6060611afd826113a4565b611b635760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610850565b6000828152600a602052604081208054611b7c906129b8565b80601f0160208091040260200160405190810160405280929190818152602001828054611ba8906129b8565b8015611bf55780601f10611bca57610100808354040283529160200191611bf5565b820191906000526020600020905b815481529060010190602001808311611bd857829003601f168201915b505050505090506000611c1360408051602081019091526000815290565b9050805160001415611c26575092915050565b815115611c58578082604051602001611c4092919061277a565b60405160208183030381529060405292505050919050565b61159c84611df9565b60006001600160e01b031982166380ac58cd60e01b1480611c9257506001600160e01b03198216635b5e139f60e01b145b8061069f57506301ffc9a760e01b6001600160e01b031983161461069f565b610986838383611ed1565b611cc68383611f89565b611cd36000848484611cef565b6109865760405162461bcd60e51b815260040161085090612870565b60006001600160a01b0384163b15611df157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611d33903390899088908890600401612820565b602060405180830381600087803b158015611d4d57600080fd5b505af1925050508015611d7d575060408051601f3d908101601f19168201909252611d7a9181019061263b565b60015b611dd7573d808015611dab576040519150601f19603f3d011682016040523d82523d6000602084013e611db0565b606091505b508051611dcf5760405162461bcd60e51b815260040161085090612870565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061159c565b50600161159c565b6060611e04826113a4565b611e685760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610850565b6000611e7f60408051602081019091526000815290565b90506000815111611e9f5760405180602001604052806000815250611eca565b80611ea9846120c8565b604051602001611eba92919061277a565b6040516020818303038152906040525b9392505050565b6001600160a01b038316611f2c57611f2781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611f4f565b816001600160a01b0316836001600160a01b031614611f4f57611f4f83826121c6565b6001600160a01b038216611f665761098681612263565b826001600160a01b0316826001600160a01b031614610986576109868282612312565b6001600160a01b038216611fdf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610850565b611fe8816113a4565b156120355760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610850565b61204160008383611cb1565b6001600160a01b038216600090815260036020526040812080546001929061206a908490612913565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060816120ec5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156121165780612100816129f3565b915061210f9050600a8361292b565b91506120f0565b60008167ffffffffffffffff81111561213157612131612a7a565b6040519080825280601f01601f19166020018201604052801561215b576020820181803683370190505b5090505b841561159c5761217060018361295e565b915061217d600a86612a0e565b612188906030612913565b60f81b81838151811061219d5761219d612a64565b60200101906001600160f81b031916908160001a9053506121bf600a8661292b565b945061215f565b600060016121d384610fe4565b6121dd919061295e565b600083815260076020526040902054909150808214612230576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906122759060019061295e565b6000838152600960205260408120546008805493945090928490811061229d5761229d612a64565b9060005260206000200154905080600883815481106122be576122be612a64565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806122f6576122f6612a4e565b6001900381819060005260206000200160009055905550505050565b600061231d83610fe4565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612362906129b8565b90600052602060002090601f01602090048101928261238457600085556123ca565b82601f1061239d57805160ff19168380011785556123ca565b828001600101855582156123ca579182015b828111156123ca5782518255916020019190600101906123af565b506123d69291506123da565b5090565b5b808211156123d657600081556001016123db565b600067ffffffffffffffff8084111561240a5761240a612a7a565b604051601f8501601f19908116603f0116810190828211818310171561243257612432612a7a565b8160405280935085815286868601111561244b57600080fd5b858560208301376000602087830101525050509392505050565b8035801515811461247557600080fd5b919050565b803560ff8116811461247557600080fd5b60006020828403121561249d57600080fd5b8135611eca81612a90565b600080604083850312156124bb57600080fd5b82356124c681612a90565b915060208301356124d681612a90565b809150509250929050565b6000806000606084860312156124f657600080fd5b833561250181612a90565b9250602084013561251181612a90565b929592945050506040919091013590565b6000806000806080858703121561253857600080fd5b843561254381612a90565b9350602085013561255381612a90565b925060408501359150606085013567ffffffffffffffff81111561257657600080fd5b8501601f8101871361258757600080fd5b612596878235602084016123ef565b91505092959194509250565b600080604083850312156125b557600080fd5b82356125c081612a90565b91506125ce60208401612465565b90509250929050565b600080604083850312156125ea57600080fd5b82356125f581612a90565b946020939093013593505050565b60006020828403121561261557600080fd5b611eca82612465565b60006020828403121561263057600080fd5b8135611eca81612aa5565b60006020828403121561264d57600080fd5b8151611eca81612aa5565b60006020828403121561266a57600080fd5b5035919050565b6000806040838503121561268457600080fd5b82359150602083013567ffffffffffffffff8111156126a257600080fd5b8301601f810185136126b357600080fd5b6126c2858235602084016123ef565b9150509250929050565b600080600080600060a086880312156126e457600080fd5b85359450602086013593506126fb6040870161247a565b94979396509394606081013594506080013592915050565b6000806000806080858703121561272957600080fd5b843593506127396020860161247a565b93969395505050506040820135916060013590565b60008151808452612766816020860160208601612975565b601f01601f19169290920160200192915050565b6000835161278c818460208801612975565b8351908301906127a0818360208801612975565b01949350505050565b7f68747470733a2f2f73746174696f6e30782e636f6d2f6170692f0000000000008152600083516127e181601a850160208801612975565b602f60f81b601a91840191820152835161280281601b840160208801612975565b64173539b7b760d91b601b9290910191820152602001949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906128539083018461274e565b9695505050505050565b602081526000611eca602083018461274e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000821982111561292657612926612a22565b500190565b60008261293a5761293a612a38565b500490565b600081600019048311821515161561295957612959612a22565b500290565b60008282101561297057612970612a22565b500390565b60005b83811015612990578181015183820152602001612978565b838111156111b55750506000910152565b6000816129b0576129b0612a22565b506000190190565b600181811c908216806129cc57607f821691505b602082108114156129ed57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612a0757612a07612a22565b5060010190565b600082612a1d57612a1d612a38565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146106e857600080fd5b6001600160e01b0319811681146106e857600080fdfea264697066735822122089fcb438debeb91f86f5632b847374817d7edb09b30c345105161bfbb729dc5c64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c806346fdcb4611610118578063a22cb465116100a0578063d897833e1161006f578063d897833e146105db578063e8b5498d146105fb578063e985e9c514610611578063eb8d24441461065a578063ef23571d1461067457600080fd5b8063a22cb4651461054b578063b88d4fde1461056b578063c87b56dd1461058b578063c884ef83146105ab57600080fd5b806370a08231116100e757806370a08231146104b95780638d859f3e146104d95780638da5cb5b146104f657806395d89b4114610516578063998b59491461052b57600080fd5b806346fdcb46146104395780634f6ccce71461044c5780636352211e1461046c578063667022fd1461048c57600080fd5b8063162094c41161019b57806323b872dd1161016a57806323b872dd146103a35780632f745c59146103c3578063368bf74e146103e357806342842e0e146103f9578063449a52f81461041957600080fd5b8063162094c41461033857806318160ddd14610358578063212e8f671461036d578063238ac9331461038357600080fd5b806306fdde03116101d757806306fdde03146102995780630804fa45146102bb578063081812fc146102f8578063095ea7b31461031857600080fd5b806301ffc9a71461020957806302c7e7af1461023e57806303f8ee411461026257806306394c9b14610279575b600080fd5b34801561021557600080fd5b5061022961022436600461261e565b610694565b60405190151581526020015b60405180910390f35b34801561024a57600080fd5b50610254600c5481565b604051908152602001610235565b34801561026e57600080fd5b506102776106a5565b005b34801561028557600080fd5b5061027761029436600461248b565b6106eb565b3480156102a557600080fd5b506102ae610756565b604051610235919061285d565b3480156102c757600080fd5b50600e546102e09061010090046001600160a01b031681565b6040516001600160a01b039091168152602001610235565b34801561030457600080fd5b506102e0610313366004612658565b6107e8565b34801561032457600080fd5b506102776103333660046125d7565b610875565b34801561034457600080fd5b50610277610353366004612671565b61098b565b34801561036457600080fd5b50600854610254565b34801561037957600080fd5b5061025461232881565b34801561038f57600080fd5b50600f546102e0906001600160a01b031681565b3480156103af57600080fd5b506102776103be3660046124e1565b6109b0565b3480156103cf57600080fd5b506102546103de3660046125d7565b6109e1565b3480156103ef57600080fd5b506102546103e881565b34801561040557600080fd5b506102776104143660046124e1565b610a77565b34801561042557600080fd5b506102776104343660046125d7565b610a92565b6102776104473660046126cc565b610b6c565b34801561045857600080fd5b50610254610467366004612658565b610eda565b34801561047857600080fd5b506102e0610487366004612658565b610f6d565b34801561049857600080fd5b506102546104a736600461248b565b60106020526000908152604090205481565b3480156104c557600080fd5b506102546104d436600461248b565b610fe4565b3480156104e557600080fd5b50610254680ad78ebc5ac620000081565b34801561050257600080fd5b50600b546102e0906001600160a01b031681565b34801561052257600080fd5b506102ae61106b565b34801561053757600080fd5b5061027761054636600461248b565b61107a565b34801561055757600080fd5b506102776105663660046125a2565b6110be565b34801561057757600080fd5b50610277610586366004612522565b611183565b34801561059757600080fd5b506102ae6105a6366004612658565b6111bb565b3480156105b757600080fd5b506102296105c636600461248b565b60116020526000908152604090205460ff1681565b3480156105e757600080fd5b506102776105f6366004612603565b6111c6565b34801561060757600080fd5b50610254600d5481565b34801561061d57600080fd5b5061022961062c3660046124a8565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b34801561066657600080fd5b50600e546102299060ff1681565b34801561068057600080fd5b5061027761068f366004612713565b6111f0565b600061069f8261137f565b92915050565b600b546001600160a01b031633146106bc57600080fd5b60405133904780156108fc02916000818181858888f193505050501580156106e8573d6000803e3d6000fd5b50565b600b546001600160a01b0316331461070257600080fd5b600b80546001600160a01b0319166001600160a01b0383169081179091556040519081527f8eb831fe42156caaf4721a87ad40c6e662b893dbeee76d7a3ed2564a318b091c9060200160405180910390a150565b606060008054610765906129b8565b80601f0160208091040260200160405190810160405280929190818152602001828054610791906129b8565b80156107de5780601f106107b3576101008083540402835291602001916107de565b820191906000526020600020905b8154815290600101906020018083116107c157829003601f168201915b5050505050905090565b60006107f3826113a4565b6108595760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b600061088082610f6d565b9050806001600160a01b0316836001600160a01b031614156108ee5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610850565b336001600160a01b038216148061090a575061090a813361062c565b61097c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610850565b61098683836113c1565b505050565b600b546001600160a01b031633146109a257600080fd5b6109ac828261142f565b5050565b6109ba33826114ba565b6109d65760405162461bcd60e51b8152600401610850906128c2565b6109868383836115a4565b60006109ec83610fe4565b8210610a4e5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610850565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61098683838360405180602001604052806000815250611183565b600b546001600160a01b03163314610aa957600080fd5b600d54610ab8906103e861295e565b811115610ac457600080fd5b60008111610ad157600080fd5b60005b81811015610b50576000610ae73061174f565b610af8610af360085490565b6118f7565b604051602001610b099291906127a9565b6040516020818303038152906040529050610b3d84610b2760085490565b83604051806020016040528060008152506119f5565b5080610b48816129f3565b915050610ad4565b5080600d6000828254610b639190612913565b90915550505050565b60008511610bbc5760405162461bcd60e51b815260206004820152601f60248201527f53706163657368697020636f756e742063616e6e6f74206265205a65726f21006044820152606401610850565b600c54610bcb9061232861295e565b851115610c0f5760405162461bcd60e51b815260206004820152601260248201527153616c65206f7574206f662073746f636b2160701b6044820152606401610850565b600e5460ff16610c575760405162461bcd60e51b815260206004820152601360248201527253616c65206973206e6f74206163746976652160681b6044820152606401610850565b336000908152601060205260409020548490610c74908790612913565b1115610c7f57600080fd5b6040516bffffffffffffffffffffffff193360601b1660208201526034810185905260009060540160408051601f198184030181529190528051602090910120600f549091506001600160a01b0316610cda82868686611a0a565b6001600160a01b031614610ced57600080fd5b6000610d02680ad78ebc5ac62000008861293f565b9050803414610d885760405162461bcd60e51b815260206004820152604660248201527f53656e74206574686572206973206e6f7420657175616c20746f20746865207260448201527f6571756972656420616d6f756e7420666f7220707572636861736520636f6d706064820152653632ba34b7b760d11b608482015260a401610850565b60005b87811015610dec576000610d9e3061174f565b610daa610af360085490565b604051602001610dbb9291906127a9565b6040516020818303038152906040529050610dd933610b2760085490565b5080610de4816129f3565b915050610d8b565b5086600c6000828254610dff9190612913565b90915550503360009081526010602052604081208054899290610e23908490612913565b9091555050600e5460405160009161010090046001600160a01b03169034908381818185875af1925050503d8060008114610e7a576040519150601f19603f3d011682016040523d82523d6000602084013e610e7f565b606091505b5050905080610ed05760405162461bcd60e51b815260206004820152601760248201527f4661696c656420746f20666f72776172642066756e64730000000000000000006044820152606401610850565b5050505050505050565b6000610ee560085490565b8210610f485760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610850565b60088281548110610f5b57610f5b612a64565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b03168061069f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610850565b60006001600160a01b03821661104f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610850565b506001600160a01b031660009081526003602052604090205490565b606060018054610765906129b8565b600e5461010090046001600160a01b0316331461109657600080fd5b600e80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6001600160a01b0382163314156111175760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610850565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61118d33836114ba565b6111a95760405162461bcd60e51b8152600401610850906128c2565b6111b584848484611abf565b50505050565b606061069f82611af2565b600b546001600160a01b031633146111dd57600080fd5b600e805460ff1916911515919091179055565b3360009081526011602052604090205460ff16156112505760405162461bcd60e51b815260206004820152601e60248201527f596f7520616c726561647920636c61696d656420796f757220736b696e7300006044820152606401610850565b6040516bffffffffffffffffffffffff193360601b1660208201526034810185905260009060540160408051601f198184030181529190528051602090910120600f549091506001600160a01b03166112ab82868686611a0a565b6001600160a01b0316146112be57600080fd5b60005b858110156113225760006112d43061174f565b6112e0610af360085490565b6040516020016112f19291906127a9565b604051602081830303815290604052905061130f33610b2760085490565b508061131a816129f3565b9150506112c1565b5084600c60008282546113359190612913565b90915550503360009081526010602052604081208054879290611359908490612913565b9091555050336000908152601160205260409020805460ff191660011790555050505050565b60006001600160e01b0319821663780e9d6360e01b148061069f575061069f82611c61565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113f682610f6d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b611438826113a4565b61149b5760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610850565b6000828152600a60209081526040909120825161098692840190612356565b60006114c5826113a4565b6115265760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610850565b600061153183610f6d565b9050806001600160a01b0316846001600160a01b0316148061156c5750836001600160a01b0316611561846107e8565b6001600160a01b0316145b8061159c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b03166115b782610f6d565b6001600160a01b03161461161f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610850565b6001600160a01b0382166116815760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610850565b61168c838383611cb1565b6116976000826113c1565b6001600160a01b03831660009081526003602052604081208054600192906116c090849061295e565b90915550506001600160a01b03821660009081526003602052604081208054600192906116ee908490612913565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60606001600160a01b0382166014600061176a82600261293f565b611775906002612913565b67ffffffffffffffff81111561178d5761178d612a7a565b6040519080825280601f01601f1916602001820160405280156117b7576020820181803683370190505b509050600360fc1b816000815181106117d2576117d2612a64565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061180157611801612a64565b60200101906001600160f81b031916908160001a905350600061182583600261293f565b611830906001612913565b90505b60018111156118a8576f181899199a1a9b1b9c1cb0b131b232b360811b84600f166010811061186457611864612a64565b1a60f81b82828151811061187a5761187a612a64565b60200101906001600160f81b031916908160001a90535060049390931c926118a1816129a1565b9050611833565b50821561159c5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610850565b60608161191b5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611945578061192f816129f3565b915061193e9050600a8361292b565b915061191f565b60008167ffffffffffffffff81111561196057611960612a7a565b6040519080825280601f01601f19166020018201604052801561198a576020820181803683370190505b5090505b841561159c5761199f60018361295e565b91506119ac600a86612a0e565b6119b7906030612913565b60f81b8183815181106119cc576119cc612a64565b60200101906001600160f81b031916908160001a9053506119ee600a8661292b565b945061198e565b611a00848483611cbc565b6111b5838361142f565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018590526000908190605c0160408051601f1981840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa158015611aaa573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b611aca8484846115a4565b611ad684848484611cef565b6111b55760405162461bcd60e51b815260040161085090612870565b6060611afd826113a4565b611b635760405162461bcd60e51b815260206004820152603160248201527f45524337323155524953746f726167653a2055524920717565727920666f72206044820152703737b732bc34b9ba32b73a103a37b5b2b760791b6064820152608401610850565b6000828152600a602052604081208054611b7c906129b8565b80601f0160208091040260200160405190810160405280929190818152602001828054611ba8906129b8565b8015611bf55780601f10611bca57610100808354040283529160200191611bf5565b820191906000526020600020905b815481529060010190602001808311611bd857829003601f168201915b505050505090506000611c1360408051602081019091526000815290565b9050805160001415611c26575092915050565b815115611c58578082604051602001611c4092919061277a565b60405160208183030381529060405292505050919050565b61159c84611df9565b60006001600160e01b031982166380ac58cd60e01b1480611c9257506001600160e01b03198216635b5e139f60e01b145b8061069f57506301ffc9a760e01b6001600160e01b031983161461069f565b610986838383611ed1565b611cc68383611f89565b611cd36000848484611cef565b6109865760405162461bcd60e51b815260040161085090612870565b60006001600160a01b0384163b15611df157604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611d33903390899088908890600401612820565b602060405180830381600087803b158015611d4d57600080fd5b505af1925050508015611d7d575060408051601f3d908101601f19168201909252611d7a9181019061263b565b60015b611dd7573d808015611dab576040519150601f19603f3d011682016040523d82523d6000602084013e611db0565b606091505b508051611dcf5760405162461bcd60e51b815260040161085090612870565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061159c565b50600161159c565b6060611e04826113a4565b611e685760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610850565b6000611e7f60408051602081019091526000815290565b90506000815111611e9f5760405180602001604052806000815250611eca565b80611ea9846120c8565b604051602001611eba92919061277a565b6040516020818303038152906040525b9392505050565b6001600160a01b038316611f2c57611f2781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b611f4f565b816001600160a01b0316836001600160a01b031614611f4f57611f4f83826121c6565b6001600160a01b038216611f665761098681612263565b826001600160a01b0316826001600160a01b031614610986576109868282612312565b6001600160a01b038216611fdf5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610850565b611fe8816113a4565b156120355760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610850565b61204160008383611cb1565b6001600160a01b038216600090815260036020526040812080546001929061206a908490612913565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6060816120ec5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156121165780612100816129f3565b915061210f9050600a8361292b565b91506120f0565b60008167ffffffffffffffff81111561213157612131612a7a565b6040519080825280601f01601f19166020018201604052801561215b576020820181803683370190505b5090505b841561159c5761217060018361295e565b915061217d600a86612a0e565b612188906030612913565b60f81b81838151811061219d5761219d612a64565b60200101906001600160f81b031916908160001a9053506121bf600a8661292b565b945061215f565b600060016121d384610fe4565b6121dd919061295e565b600083815260076020526040902054909150808214612230576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906122759060019061295e565b6000838152600960205260408120546008805493945090928490811061229d5761229d612a64565b9060005260206000200154905080600883815481106122be576122be612a64565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806122f6576122f6612a4e565b6001900381819060005260206000200160009055905550505050565b600061231d83610fe4565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612362906129b8565b90600052602060002090601f01602090048101928261238457600085556123ca565b82601f1061239d57805160ff19168380011785556123ca565b828001600101855582156123ca579182015b828111156123ca5782518255916020019190600101906123af565b506123d69291506123da565b5090565b5b808211156123d657600081556001016123db565b600067ffffffffffffffff8084111561240a5761240a612a7a565b604051601f8501601f19908116603f0116810190828211818310171561243257612432612a7a565b8160405280935085815286868601111561244b57600080fd5b858560208301376000602087830101525050509392505050565b8035801515811461247557600080fd5b919050565b803560ff8116811461247557600080fd5b60006020828403121561249d57600080fd5b8135611eca81612a90565b600080604083850312156124bb57600080fd5b82356124c681612a90565b915060208301356124d681612a90565b809150509250929050565b6000806000606084860312156124f657600080fd5b833561250181612a90565b9250602084013561251181612a90565b929592945050506040919091013590565b6000806000806080858703121561253857600080fd5b843561254381612a90565b9350602085013561255381612a90565b925060408501359150606085013567ffffffffffffffff81111561257657600080fd5b8501601f8101871361258757600080fd5b612596878235602084016123ef565b91505092959194509250565b600080604083850312156125b557600080fd5b82356125c081612a90565b91506125ce60208401612465565b90509250929050565b600080604083850312156125ea57600080fd5b82356125f581612a90565b946020939093013593505050565b60006020828403121561261557600080fd5b611eca82612465565b60006020828403121561263057600080fd5b8135611eca81612aa5565b60006020828403121561264d57600080fd5b8151611eca81612aa5565b60006020828403121561266a57600080fd5b5035919050565b6000806040838503121561268457600080fd5b82359150602083013567ffffffffffffffff8111156126a257600080fd5b8301601f810185136126b357600080fd5b6126c2858235602084016123ef565b9150509250929050565b600080600080600060a086880312156126e457600080fd5b85359450602086013593506126fb6040870161247a565b94979396509394606081013594506080013592915050565b6000806000806080858703121561272957600080fd5b843593506127396020860161247a565b93969395505050506040820135916060013590565b60008151808452612766816020860160208601612975565b601f01601f19169290920160200192915050565b6000835161278c818460208801612975565b8351908301906127a0818360208801612975565b01949350505050565b7f68747470733a2f2f73746174696f6e30782e636f6d2f6170692f0000000000008152600083516127e181601a850160208801612975565b602f60f81b601a91840191820152835161280281601b840160208801612975565b64173539b7b760d91b601b9290910191820152602001949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906128539083018461274e565b9695505050505050565b602081526000611eca602083018461274e565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6000821982111561292657612926612a22565b500190565b60008261293a5761293a612a38565b500490565b600081600019048311821515161561295957612959612a22565b500290565b60008282101561297057612970612a22565b500390565b60005b83811015612990578181015183820152602001612978565b838111156111b55750506000910152565b6000816129b0576129b0612a22565b506000190190565b600181811c908216806129cc57607f821691505b602082108114156129ed57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612a0757612a07612a22565b5060010190565b600082612a1d57612a1d612a38565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146106e857600080fd5b6001600160e01b0319811681146106e857600080fdfea264697066735822122089fcb438debeb91f86f5632b847374817d7edb09b30c345105161bfbb729dc5c64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/Station.sol:Station",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/Station.sol:Station",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/Station.sol:Station",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/Station.sol:Station",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/Station.sol:Station",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/Station.sol:Station",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 966,
        "contract": "contracts/Station.sol:Station",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 970,
        "contract": "contracts/Station.sol:Station",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 973,
        "contract": "contracts/Station.sol:Station",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 977,
        "contract": "contracts/Station.sol:Station",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1302,
        "contract": "contracts/Station.sol:Station",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 2053,
        "contract": "contracts/Station.sol:Station",
        "label": "owner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2055,
        "contract": "contracts/Station.sol:Station",
        "label": "sold",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2057,
        "contract": "contracts/Station.sol:Station",
        "label": "teamMinted",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2060,
        "contract": "contracts/Station.sol:Station",
        "label": "saleIsActive",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 2062,
        "contract": "contracts/Station.sol:Station",
        "label": "stationLabs",
        "offset": 1,
        "slot": "14",
        "type": "t_address_payable"
      },
      {
        "astId": 2064,
        "contract": "contracts/Station.sol:Station",
        "label": "signer",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 2068,
        "contract": "contracts/Station.sol:Station",
        "label": "bought",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2072,
        "contract": "contracts/Station.sol:Station",
        "label": "claimed",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}